name: publish
on:
  workflow_dispatch: # Allow running the workflow manually from the GitHub UI
  push:
    branches:
      - 'master'       # Run the workflow when pushing to the main branch
  pull_request:
    branches:
      - '*'          # Run the workflow for all pull requests
  release:
    types:
      - published    # Run the workflow when a new GitHub release is published

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{ github.workspace }}/nuget

defaults:
  run:
    shell: pwsh

jobs:
  create_nuget:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0 # Get all history to allow automatic versioning using MinVer

    - name: Print Working Directory
      run: pwd

    - name: List Files
      run: Get-ChildItem -Recurse

    # Install the .NET SDK indicated in the global.json file
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.412'

    # Restore dependencies to ensure assets files are generated
    - name: Restore Dependencies
      run: dotnet restore

    # Build the solution to ensure all projects are compiled
    - name: Build Solution
      run: dotnet build --configuration Release

    # Create the NuGet package in the folder from the environment variable NuGetDirectory
    - name: Create NuGet Packages
      run: |
        dotnet pack ./InnoAndLogic.Shared/InnoAndLogic.Shared.csproj --configuration Release --include-symbols --output ${{ env.NuGetDirectory }}
        dotnet pack ./InnoAndLogic.Persistence/InnoAndLogic.Persistence.csproj --configuration Release --include-symbols --output ${{ env.NuGetDirectory }}

    - uses: actions/upload-artifact@v4
      with:
        name: nuget
        if-no-files-found: error
        retention-days: 7
        path: |
          ${{ env.NuGetDirectory }}/*.nupkg
          ${{ env.NuGetDirectory }}/*.snupkg

  run_test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.412'
    - name: Clean and Restore
      run: |
        dotnet clean
        dotnet restore
    - name: Run tests
      run: dotnet test --configuration Release

  deploy:
    # Publish only when a new release is created
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: [ create_nuget, run_test ]
    steps:
    - uses: actions/download-artifact@v4
      with:
        name: nuget
        path: ${{ env.NuGetDirectory }}

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v4

    - name: Publish NuGet package
      run: |
        foreach($file in (Get-ChildItem "${{ env.NuGetDirectory }}" -Recurse -Include *.nupkg, *.snupkg)) {
            dotnet nuget push $file --api-key "${{ secrets.NUGET_APIKEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
        }
