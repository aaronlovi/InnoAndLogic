name: publish
on:
  workflow_dispatch: # Allow running the workflow manually from the GitHub UI
  push:
    branches:
      - 'master'       # Run the workflow when pushing to the main branch
  pull_request:
    branches:
      - '*'          # Run the workflow for all pull requests
  release:
    types:
      - published    # Run the workflow when a new GitHub release is published

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{ github.workspace}}/nuget

defaults:
  run:
    shell: pwsh

jobs:
  create_nuget:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0 # Get all history to allow automatic versioning using MinVer

    - name: Print Working Directory
      run: pwd

    - name: List Files
      run: Get-ChildItem -Recurse

    # Install the .NET SDK indicated in the global.json file
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.412'

    # Build the solution to ensure all projects are compiled
    - name: Build Solution
      run: dotnet build --configuration Release

    # List build output
    - name: List Build Output
      run: |
        echo "Listing build output for InnoAndLogic.Shared:"
        Get-ChildItem InnoAndLogic.Shared\bin\Release\net8.0 -Recurse
        echo "Listing build output for InnoAndLogic.Persistence:"
        Get-ChildItem InnoAndLogic.Persistence\bin\Release\net8.0 -Recurse
        echo "Listing build output for InnoAndLogic.DistributedCaching:"
        Get-ChildItem InnoAndLogic.DistributedCaching\bin\Release\net8.0 -Recurse

    # Create the NuGet package in the folder from the environment variable NuGetDirectory
    - run: dotnet pack --configuration Release --include-symbols --output ${{ env.NuGetDirectory }}

    # Debugging step to list files in the NuGet directory
    - name: List NuGet Directory Contents
      run: |
        echo "Listing contents of NuGet directory:"
        Get-ChildItem ${{ env.NuGetDirectory }} -Recurse

    - name: Inspect NuGet Package Contents
      run: |
        foreach ($file in Get-ChildItem "${{ env.NuGetDirectory }}" -Recurse -Include *.nupkg) {
            Write-Host "Inspecting $file"
            mkdir temp
            Expand-Archive -Path $file.FullName -DestinationPath ./temp
            Get-ChildItem -Recurse ./temp
            Remove-Item -Recurse -Force ./temp
        }

    - name: Inspect Symbol Package Contents
      run: |
        foreach ($file in Get-ChildItem "${{ env.NuGetDirectory }}" -Recurse -Include *.snupkg) {
            Write-Host "Inspecting $file"
            mkdir temp
            Expand-Archive -Path $file.FullName -DestinationPath ./temp
            Get-ChildItem -Recurse ./temp
            Remove-Item -Recurse -Force ./temp
        }

    # Publish the NuGet package as an artifact, so they can be used in the following jobs
    - uses: actions/upload-artifact@v4
      with:
        name: nuget
        if-no-files-found: error
        retention-days: 7
        path: |
          ${{ env.NuGetDirectory }}/*.nupkg
          ${{ env.NuGetDirectory }}/*.snupkg

  validate_nuget:
    runs-on: windows-latest
    needs: [ create_nuget ]
    steps:
      # Install the .NET SDK indicated in the global.json file
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.412'

      # Download the NuGet package created in the previous job
      - uses: actions/download-artifact@v4
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}

      # - name: Install nuget validator
      #   run: dotnet tool update Meziantou.Framework.NuGetPackageValidation.Tool --global

      # # Validate metadata and content of the NuGet package
      # # https://www.nuget.org/packages/Meziantou.Framework.NuGetPackageValidation.Tool#readme-body-tab
      # # If some rules are not applicable, you can disable them
      # # using the --excluded-rules or --excluded-rule-ids option
      # - name: Validate package
      #   run: meziantou.validate-nuget-package (Get-ChildItem "${{ env.NuGetDirectory }}/*.nupkg").FullName

      # - name: Install Source Link Tool
      #   run: dotnet tool install --global dotnet-sourcelink

      # - name: Validate Source Link
      #   run: dotnet sourcelink test $(Get-ChildItem "${{ env.NuGetDirectory }}/*.nupkg")

  run_test:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.412'
    - name: Clean and Restore
      run: |
        dotnet clean
        dotnet restore
    - name: Run tests
      run: dotnet test --configuration Release

  deploy:
    # Publish only when a new release is created
    if: github.event_name == 'release'
    runs-on: windows-latest
    needs: [ validate_nuget, run_test ]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4

      - name: Publish NuGet package
        run: |
          foreach($file in (Get-ChildItem "${{ env.NuGetDirectory }}" -Recurse -Include *.nupkg, *.snupkg)) {
              dotnet nuget push $file --api-key "${{ secrets.NUGET_APIKEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
          }
